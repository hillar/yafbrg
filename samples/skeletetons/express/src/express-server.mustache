// sample skeleton for express server
// EDIT THIS FILE

import { default as express } from 'express'
{{#imports}}
import { {{#exports}} {{named}} as {{alias}}, {{/exports}} } from '{{specifier}}'
{{/imports}}

import { schema }  from './graphql-schema.mjs'
import {default as rootValue } from './graphql-resolvers.mjs'

import cors  from 'cors'

import * as gql from "graphql";
import { graphqlHTTP } from 'express-graphql'

// for swagger ui
import sirv from 'sirv'
import {join,dirname} from 'node:path'
import {fileURLToPath} from 'node:url';


const { graphql, buildSchema } = gql;
const serverSchema = buildSchema(schema);


const capitalize = (s) => {
  if (typeof s !== 'string') return ''
  return s.charAt(0).toUpperCase() + s.slice(1)
}

const is = {Number:(v)=>{ if (isNaN(Number(v))) return 'not a number' },String:(v)=>{ if (!v.charAt) return 'not a string'}}


function valid(name,value,type,required) {

  if (required && value === undefined) return `${name} is required`
  if (value === undefined) return
  const errors = []
  if (type.charAt) {
    //const validateFunction = capitalize(type)
    const result = is[capitalize(type)](value)
    if (result) errors.push(`${name} ${result}`)
  } else {
    for (const key of Object.keys(type)){
      const result = valid(`${name}.${key}`,value[key],type[key].type, type[key].required)
      if (result) errors.push(result)
    }
  }
  console.dir({name,value,type,required,errors})
  return errors.length ? errors : undefined
}


express()
    .use(cors({ origin: '*' }))
    .use('/openapi',sirv(join(dirname(fileURLToPath(import.meta.url)),'__openapi__'),{single:true,dev:true}))
    .use('/graphql', graphqlHTTP({ schema: serverSchema, rootValue, graphiql: true}))
    {{#methods}}
    .{{method}}('{{route}}',  (req, res, next) => {
      const { params, query, body } = req
      console.dir({ params, query, body })
      res.setHeader('conten-type','{{contenttype}}; charset=UTF-8')
      const errors = []
      {{#validations}}

       const result{{name}} = valid('{{name}}',{{arg}},{{type}},{{required}})
       if (result{{name}}?.length) errors.push(result{{name}})
       console.dir({result{{name}},errors})

      {{/validations}}
      console.dir({errors})
      if (errors.length) {
        console.dir(errors)
        res.statusCode = 400
        res.end(JSON.stringify({errors:errors.flat()},null,4))
      } else res.end(JSON.stringify( {{alias}}({{#params}}{{.}},{{/params}})))
    })
    {{/methods}}
.listen({{port}}, () => {
  console.log("> Express server running on localhost:",{{port}});
})
