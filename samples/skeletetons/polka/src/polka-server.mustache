// sample skeleton for polka server
// EDIT THIS FILE

import { default as polka } from 'polka'
{{#imports}}
import { {{#exports}} {{named}} as {{alias}}, {{/exports}} } from '{{specifier}}'
{{/imports}}

import { schema }  from './graphql-schema.mjs'
import {default as rootValue } from './graphql-resolvers.mjs'

import cors  from 'cors'

import * as gql from "graphql";
import { graphqlHTTP } from 'express-graphql'

// for swagger ui
import sirv from 'sirv'
import {join,dirname} from 'node:path'
import {fileURLToPath} from 'node:url';


const { graphql, buildSchema } = gql;
const serverSchema = buildSchema(schema);

const ENVS = []
const defaults = {}
{{#envs}}
// {{from}}
{{#vars}}
//{{funcName}} {{varName}}
ENVS.push('{{envName}}')
defaults.{{envName}} = {{defaultValue}}
{{/vars}}
{{/envs}}
const cmdArgs = process.argv.slice(2)
if (cmdArgs.includes('-h') || cmdArgs.includes('--help')) {
    console.log('options (:default):')
    console.log(ENVS.map(x=>'\t--'+x.toLowerCase()+''+((defaults[x] && defaults[x]!=='undefined')?' :'+defaults[x] : '')).join('\n'))
    console.log('enviroment vars (:value):')
    console.log(ENVS.map(x=>'\t'+x+' '+(process.env[x]?' :'+process.env[x]:'')).join('\n'))
    process.exit(0)
}
for (let settable of ENVS){
  const is = cmdArgs.filter(x=>x.includes(settable.toLowerCase()))
  if (is.length>0){
    console.dir({settable,default:defaults[settable]})
    const bittes = is[0].split("=")
    if (bittes.length === 2) {
      const clean = bittes[0].replace('--','').toUpperCase()
      if (settable.toUpperCase() === clean)
        if (process.env[settable]) console.log(settable,'was',process.env[settable])
        console.log('setting',settable,'to', bittes[1])
        process.env[settable] = bittes[1]
    } else {
      const i = cmdArgs.indexOf(is[0])
      // TODO chech match
      if (process.env[settable]) console.log(settable,'was',process.env[settable])
      console.log('setting',settable,'to', cmdArgs[i+1])
      process.env[settable] = cmdArgs[i+1]
    }
  }
}
//console.dir(process.env)

const capitalize = (s) => {
  if (typeof s !== 'string') return ''
  return s.charAt(0).toUpperCase() + s.slice(1)
}

const is = {Number:(v)=>{ if (isNaN(Number(v))) return 'not a number' },String:(v)=>{ if (!v.charAt) return 'not a string'}}


function valid(name,value,type,required) {

  if (required && value === undefined) return `${name} is required`
  if (value === undefined) return
  const errors = []
  if (type.charAt) {
    //const validateFunction = capitalize(type)
    const result = is[capitalize(type)](value)
    if (result) errors.push(`${name} ${result}`)
  } else {
    for (const key of Object.keys(type)){
      const result = valid(`${name}.${key}`,value[key],type[key].type, type[key].required)
      if (result) errors.push(result)
    }
  }
  console.dir({name,value,type,required,errors})
  return errors.length ? errors : undefined
}


polka({onError: (err, req, res, _next) => {

  if (err instanceof SyntaxError || err instanceof TypeError) {
    console.error(err)
    process.exit(1)
  } else {
    /*

    if error status or statusCode is not set, then 400 is used

    400 Bad Request

    The 400 (Bad Request) status code indicates that the server cannot or
    will not process the request due to something that is perceived to be
    a client error (e.g., malformed request syntax, invalid request
    message framing, or deceptive request routing).

    */
    res.statusCode = err.status ? err.status : (err.statusCode ? err.statusCode: 400)
    res.end(JSON.stringify(err))
  }
}})
    .use(cors({
        origin: '*'
    }))
    .use('/openapi',sirv(join(dirname(fileURLToPath(import.meta.url)),'__openapi__'),{single:true,dev:true}))
    .use((req,res,next)=>{
        const body = []
        req.on('data', chunk => body.push(chunk))
        req.on('end', () => {
          try {
            const tmp = Buffer.concat(body).toString()
            if (tmp.length) req.body = JSON.parse(tmp)
          } catch (error) {
            error.statusCode = 415
            throw error
          } finally {
            next()
          }
        })
    })
    .use('/graphql', graphqlHTTP({
    schema: serverSchema,
    rootValue ,
    graphiql: true,
    }))
    {{#methods}}
    .{{method}}('{{route}}', {{async}} (req, res, next) => {
      const { params, query, body } = req
      res.setHeader('content-type','{{contenttype}}; charset=UTF-8')
      const errors = []
      {{#validations}}

       const result{{name}} = valid('{{name}}',{{arg}},{{type}},{{required}})
       if (result{{name}}?.length) errors.push(result{{name}})
       console.dir({result{{name}},errors})

      {{/validations}}
      console.dir({errors})
      if (errors.length) {
        console.dir(errors)
        res.statusCode = 400
        res.end(JSON.stringify({errors:errors.flat()},null,4))
      } else res.end(JSON.stringify( {{wait}} {{alias}}({{#params}}{{.}},{{/params}})))
    })
    {{/methods}}
.listen({{port}}, () => {
  console.log("> Polka server running on localhost:",{{port}});
})
